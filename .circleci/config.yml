# Immuni CircleCI configuration.
# Copyright (C) 2020 Presidenza del Consiglio dei Ministri.
# Please refer to the AUTHORS file for more information.
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.

version: 2.1
description: Maintain consistent security and quality standards.

# TODO: Evaluate promotion to orbs.
commands:
  initialize-submodules:
    description: Initialize the git submodules.
    steps:
      - run:
          name: "[git] Initialize submodules"
          command: git submodule update --init

  poetry-install:
    description: |
      Install Poetry and the Python dependencies from the poetry.lock with Poetry.
      The virtualenv containing the installed packages will automatically be cached and restored.
    parameters:
      additional_parameters:
        description: Additional parameters to append to the poetry install command (e.g., --extras)
        type: string
        default: ""

      deps_cache_version:
        description: Dependencies cache version identifier. Bump this to clear the virtualenv cache.
        type: string
        default: "v1"

      poetry_version:
        description: The version of Poetry to be installed.
        type: string
        default: 1.0.5

    steps:
      - run:
          name: "[python] Setup Poetry environment"
          command: echo 'export POETRY_VERSION=1.0.5; export POETRY_HOME=./.poetry; export PATH=$POETRY_HOME/bin:$PATH' >> $BASH_ENV
      - restore_cache:
          name: "[python] Restore the Poetry cache"
          keys:
            - poetry-<< parameters.poetry_version >>
      - run:
          name: "[python] Install Poetry"
          working_directory: .
          command: curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/<< parameters.poetry_version >>/get-poetry.py | python
      - save_cache:
          name: "[python] Save the Poetry cache"
          key: poetry-<< parameters.poetry_version >>
          paths:
            - ./.poetry
      - restore_cache:
          name: "[python] Restore the dependencies cache"
          keys:
            - venv-<< parameters.deps_cache_version >>-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ checksum "./poetry.lock" }}
            - venv-<< parameters.deps_cache_version >>-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}
            - venv-<< parameters.deps_cache_version >>-{{ .Environment.CIRCLE_JOB }}
      - run:
          name: "[python] Install the dependencies"
          working_directory: .
          environment:
            POETRY_VIRTUALENVS_IN_PROJECT: true
          command: poetry install -v << parameters.additional_parameters >>
      - save_cache:
          name: "[python] Save the dependencies cache"
          key: venv-<< parameters.deps_cache_version >>-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ checksum "./poetry.lock" }}
          paths:
            - .venv
      - run:
          name: "[python] Activate the virtual environment"
          command: echo 'source .venv/bin/activate' >> $BASH_ENV

  pytest:
    description: |
      Run pytest with code coverage.
      Store the coverage reports as artifacts.
      Fail if the code coverage is below the minimum threshold.
    parameters:
      coverage_path:
        description: Filesystem path to measure coverage.
        type: string
        default: .

      min_coverage:
        description: Minimum code coverage percentage ([0,100]).
        type: integer
        default: 100

    steps:
      - run:
          name: "[python] Run pytest with code coverage"
          command: |
            pytest \
              --capture=no \
              --cov-branch \
              --cov-fail-under=<<parameters.min_coverage>> \
              --cov-report=html:coverage-reports \
              --cov=<<parameters.coverage_path>> \
              --junitxml=coverage-reports/junit.xml \
              --ignore=common \
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports
      - store_artifacts:
          path: coverage-reports

jobs:
  test:
    docker:
      - image: cimg/python:3.8.2
      - image: circleci/mongo:4.0.18-xenial
      - image: circleci/redis:5.0.9-alpine3.11
    resource_class: small
    steps:
      - checkout
      - initialize-submodules
      - poetry-install:
          deps_cache_version: "v2"
      - pytest:
          coverage_path: ./immuni_analytics
          min_coverage: 98

  check:
    docker:
      - image: cimg/python:3.8.2
    resource_class: small
    steps:
      - checkout
      - initialize-submodules
      - poetry-install:
          deps_cache_version: "v2"
      - run:
          name: "[python] Run checks"
          command: poetry run checks immuni_analytics --ci

  build-and-run-example:
    docker:
      - image: cimg/base:2020.05
    resource_class: small
    steps:
      - checkout
      - initialize-submodules
      - setup_remote_docker
      - run:
          name: "[docker] Build the images"
          command: |
            cd docker && docker-compose build \
                --build-arg GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD) \
                --build-arg GIT_SHA=$(git rev-parse --verify HEAD) \
                --build-arg GIT_TAG=$(git tag --points-at HEAD | cat) \
                --build-arg BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
      - run:
          name: "[docker] Run the example"
          command: cd docker && docker-compose up --detach
      - run:
          name: "[misc] Let the Celery app start"
          command: sleep 3
      - run:
          name: "[celery] Worker authorization iOS health check"
          command: |
            docker exec docker_worker_authorization_ios_1 \
                celery inspect stats --app=immuni_analytics.celery.authorization_ios.app.celery_app
      - run:
          name: "[celery] Worker authorization Android health check"
          command: |
            docker exec docker_worker_authorization_android_1 \
                celery inspect stats --app=immuni_analytics.celery.authorization_android.app.celery_app
      - run:
          name: "[celery] Worker scheduled health check"
          command: |
            docker exec docker_worker_scheduled_1 \
                celery inspect stats --app=immuni_analytics.celery.scheduled.app.celery_app
      - run:
          name: "[celery] Beat health check"
          command: |
            docker exec docker_beat_1 \
                ps -e | grep celery
      - run:
          name: "[sanic] API health check"
          command: |
            docker run \
                --network container:docker_api_1 \
                appropriate/curl \
                --verbose \
                --retry 10 \
                --retry-delay 1 \
                --retry-connrefused \
                http://localhost:5000

workflows:
  code-quality:
    jobs:
      - test
      - check
      - build-and-run-example
